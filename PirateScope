#!/usr/bin/env python

import wx
from wx.lib import plot
import serial, time, sys
from threading import Thread

from numpy import *
from numpy.fft import fft

class BPO(Thread):

	SYNC_NONE = 0
	SYNC_RISE = 1
	SYNC_FALL = 2

	MODE_CONTINUOUS = 0
	MODE_ONESHOT = 1

	minRate = 1.
	maxRate = 5720.

	minV = 0.
	maxV = 6.

	phaseOffset = 0
	trigV = 0


	def __init__(self, port, skips, mode, sync, trigV, phaseOffset):

		# Open BP serial device:
		try:
			self.serdev = serial.Serial(port=port, baudrate=115200)
		except:
			# Leave exception for calling function to deal with:
			raise

		# Perform default thread initialization:
		Thread.__init__(self)

		# Set oscilloscope options
		self.skips = skips
		self.mode = mode
		self.sync = sync
		self.trigV = trigV
		self.phaseOffset = phaseOffset
		self.data = nan*ones(100)

		# Enter binary scripting mode:
		self.serdev.write('\n\n')
		time.sleep(0.1)
		self.serdev.write(''.join(['\x00' for i in range(20)]))
		time.sleep(0.1)

		# Start continuous voltage measurement mode:
		self.serdev.flushInput()
		self.serdev.write('\x15')
		time.sleep(0.1)

		self.wantAbort = False

		self.start()

	def run(self):

		if self.mode == self.MODE_CONTINUOUS:
			while True:
				self.sample()
				if self.wantAbort:
					self.shutdown()
					return

		elif self.mode == self.MODE_ONESHOT:
			self.sample()
			self.shutdown()
			return
		
	def getV(self):

		resp = self.serdev.read(2)
		return (ord(resp[0])*256 + ord(resp[1]))*6.6/1024


	def trig_check(self, thisV, lastV):

		if self.sync == self.SYNC_RISE:
			return (thisV >= self.trigV) and (lastV < self.trigV)
		else:
			return (thisV <= self.trigV) and (lastV > self.trigV)


	def trig_init(self):

		if self.sync == self.SYNC_RISE:
			return self.maxV
		else:
			return self.minV


	def sample(self):

		if self.sync != self.SYNC_NONE:

			phaseOffsetP = max(self.phaseOffset,0)
			phaseOffsetN = -min(self.phaseOffset,0)
			vbuffer = zeros(phaseOffsetN)

			# Pad out buffer to account for negative phase offset:

			for i in range(phaseOffsetN):
				thisV = self.getV()
				vbuffer = roll(vbuffer,1)
				vbuffer[0] = thisV

			# Wait for trigger condition:

			lastV = self.trig_init()

			while True:

				thisV = self.getV()
				if phaseOffsetN:
					vbuffer = roll(vbuffer,1)
					vbuffer[0] = thisV

				if self.trig_check(thisV, lastV) or self.sync == self.SYNC_NONE:
						break
				lastV = thisV

				if self.wantAbort:
					return

			# Adjust to account for positive phase offset:

			for i in range(phaseOffsetP):
				self.getV()

				if self.wantAbort:
					return

			# Add negative-offset data:

			self.data[0:phaseOffsetN] = vbuffer[phaseOffsetN-1::-1]

			# Acquire data to fill remainder of buffer:

			for i in range(phaseOffsetN,len(self.data)):
				self.data[i] = self.getV()

				if self.wantAbort:
					return
		else:

			# Acquire data:

			for i in range(len(self.data)):
				self.data[i] = self.getV()

				if self.wantAbort:
					return


	def abort(self):
		self.wantAbort = True

	def shutdown(self):

		self.serdev.write(' ')
		time.sleep(0.1)
		self.serdev.flushInput()

		self.serdev.write('\x0f')
		time.sleep(0.1)
		self.serdev.flushInput()
		self.serdev.close()
	
	def SetSync(self, newSync):
		self.sync = newSync
	
	def SetTrig(self, newTrig):
		self.trigV = newTrig

	def SetPhaseOffset(self, newOffset):
		self.phaseOffset = newOffset


class MainWindow(wx.Frame):

	# Define Bus Pirate port (temporary)
	port = '/dev/bus_pirate'

	# Property to hold BPO instance:
	bpo = None

	def __init__(self, parent, title):

		# Call standard frame constructor:
		wx.Frame.__init__(self, parent, title=title, id=wx.ID_ANY, size=(500,480))

		# Add status bar:
		self.CreateStatusBar()

		# Set up Menus:
		self.MenuSetup()

		# Main panel:
		self.panel = wx.Panel(self)

		# Set up plot window:
		self.plotpanel = wx.Panel(self.panel)
		self.plotpanel.SetBackgroundColour('white')
		self.plot = plot.PlotCanvas(self.plotpanel)
		self.plot.SetGridColour('grey')

		self.TrigLevSlider = wx.Slider(self.plotpanel, wx.ID_ANY,
				50.*(BPO.maxV-BPO.minV), 100.*BPO.minV, 100.*BPO.maxV,
				style = wx.SL_VERTICAL | wx.SL_INVERSE)

		# Plot window panel sizers:
		self.plotsizer = wx.BoxSizer(wx.HORIZONTAL)
		self.plotsizer.Add(self.plot, 1, wx.EXPAND)
		self.plotsizer.Add(self.TrigLevSlider, 0, wx.EXPAND | wx.BOTTOM, 20)
		self.plotpanel.SetSizer(self.plotsizer)

		# Set up oscilloscope controls:
		self.contpanel = wx.Panel(self.panel, style=wx.BORDER_SUNKEN)
		self.SampleButton = wx.ToggleButton(self.contpanel, wx.ID_ANY, 'SAMPLE')
		self.SampleButton.SetBackgroundColour('green')

		self.SamplingBox = wx.StaticBox(self.contpanel, wx.ID_ANY, 'Sampling')
		self.RB_continuous = wx.RadioButton(self.contpanel, wx.ID_ANY, 'Continuous', style=wx.RB_GROUP)
		self.RB_oneshot = wx.RadioButton(self.contpanel, wx.ID_ANY, 'Single shot')
		self.FFTCheckBox = wx.CheckBox(self.contpanel, wx.ID_ANY, 'Spectrum')
		self.FreqSpinCtrlText = wx.StaticText(self.contpanel, wx.ID_ANY, 'Rate (Hz):')
		self.FreqSpinCtrl = wx.SpinCtrl(self.contpanel, wx.ID_ANY,
				initial=6000, min=1, max=6000,
				size=(60,-1))

		self.TriggeringBox = wx.StaticBox(self.contpanel, wx.ID_ANY, 'Triggering')
		self.RB_trigoff = wx.RadioButton(self.contpanel, wx.ID_ANY, 'No sync', style=wx.RB_GROUP)
		self.RB_trigrise = wx.RadioButton(self.contpanel, wx.ID_ANY, 'Rising edge')
		self.RB_trigfall = wx.RadioButton(self.contpanel, wx.ID_ANY, 'Falling edge')
		self.PhaseSpinCtrlText = wx.StaticText(self.contpanel, wx.ID_ANY, 'Offset:')
		self.PhaseSpinCtrl = wx.SpinCtrl(self.contpanel, wx.ID_ANY,
				initial=0, min=-100, max=100,
				size=(50,-1))
		

		# Oscilloscope controls panel sizers:
		self.contsizer = wx.BoxSizer(wx.HORIZONTAL)
		self.contsizer.Add(self.SampleButton, 0, wx.EXPAND | wx.ALL, 20)

		self.SamplingBoxSizer = wx.StaticBoxSizer(self.SamplingBox, wx.HORIZONTAL)
		self.SamplingBoxSizer2 = wx.BoxSizer(wx.VERTICAL)
		self.SamplingBoxSizer2.Add(self.RB_continuous, 1)
		self.SamplingBoxSizer2.Add(self.RB_oneshot, 1)
		self.SamplingBoxSizer2.Add(self.FFTCheckBox, 1)
		self.SamplingBoxSizer.Add(self.SamplingBoxSizer2, 1, wx.EXPAND)
		self.SamplingBoxSizer3 = wx.BoxSizer(wx.VERTICAL)
		self.SamplingBoxSizer3.Add(self.FreqSpinCtrlText)
		self.SamplingBoxSizer3.Add(self.FreqSpinCtrl)
		self.SamplingBoxSizer.Add(self.SamplingBoxSizer3, 0, wx.EXPAND)
		self.contsizer.Add(self.SamplingBoxSizer, 1, wx.EXPAND | wx.RIGHT, 20)

		self.TriggeringBoxSizer = wx.StaticBoxSizer(self.TriggeringBox, wx.HORIZONTAL)
		self.TriggeringBoxSizer2 = wx.BoxSizer(wx.VERTICAL)
		self.TriggeringBoxSizer2.Add(self.RB_trigoff,1)
		self.TriggeringBoxSizer2.Add(self.RB_trigrise,1)
		self.TriggeringBoxSizer2.Add(self.RB_trigfall,1)
		self.TriggeringBoxSizer.Add(self.TriggeringBoxSizer2, 1, wx.EXPAND)
		self.TriggeringBoxSizer3 = wx.BoxSizer(wx.VERTICAL)
		self.TriggeringBoxSizer3.Add(self.PhaseSpinCtrlText)
		self.TriggeringBoxSizer3.Add(self.PhaseSpinCtrl)
		self.TriggeringBoxSizer.Add(self.TriggeringBoxSizer3, 0, wx.EXPAND)
		self.contsizer.Add(self.TriggeringBoxSizer, 1, wx.EXPAND)

		self.contpanel.SetSizer(self.contsizer)

		# Main panel sizers:
		self.sizer = wx.BoxSizer(wx.VERTICAL)
		self.sizer.Add(self.plotpanel, 1, wx.EXPAND)
		self.sizer.Add(self.contpanel, 0, wx.EXPAND)
		self.panel.SetSizer(self.sizer)

		# Bind event handlers:
		self.Bind(wx.EVT_TOGGLEBUTTON, self.OnSampleButton, self.SampleButton)
		self.Bind(wx.EVT_RADIOBUTTON, self.OnSampContinuous, self.RB_continuous) 
		self.Bind(wx.EVT_RADIOBUTTON, self.OnSampOneShot, self.RB_oneshot) 
		self.Bind(wx.EVT_RADIOBUTTON, self.OnTrigRise, self.RB_trigrise) 
		self.Bind(wx.EVT_RADIOBUTTON, self.OnTrigFall, self.RB_trigfall) 
		self.Bind(wx.EVT_RADIOBUTTON, self.OnTrigOff, self.RB_trigoff) 
		self.Bind(wx.EVT_SLIDER, self.OnTrigLevAdjust, self.TrigLevSlider) 
		self.Bind(wx.EVT_SPINCTRL, self.OnPhaseAdjust, self.PhaseSpinCtrl)

		# Draw empty plot:
		self.ClearPlot()

		# Set up plot updating timer:
		self.timer = wx.Timer(self)
		self.Bind(wx.EVT_TIMER, self.OnUpdate, self.timer)

		# Set up oscilloscope defaults:
		self.OscilloscopeDefaultSetup()

		self.Show(True)


	def MenuSetup(self):

		# Create menu bar:
		menuBar = wx.MenuBar()

		# File menu:
		filemenu = wx.Menu()
		menuItemSave = filemenu.Append(wx.ID_ANY, "&Save", "Save sample to file")
		menuItemSave.Enable(False)

		filemenu.AppendSeparator()

		menuItemExit = filemenu.Append(wx.ID_EXIT, "E&xit", "Terminate the program.")
		self.Bind(wx.EVT_MENU, self.OnExit, menuItemExit)

		menuBar.Append(filemenu, "&File")

		# View menu:
		viewmenu = wx.Menu()
		self.menuItemViewGrid = viewmenu.Append(wx.ID_ANY, '&Grid', 'Toggle grid', kind=wx.ITEM_CHECK)
		self.Bind(wx.EVT_MENU, self.OnViewGrid, self.menuItemViewGrid)
		self.menuItemViewTrigLev = viewmenu.Append(wx.ID_ANY,
				'&Trigger Level', 'Toggle trigger level visibility',
				kind=wx.ITEM_CHECK)
		self.Bind(wx.EVT_MENU, self.OnViewTrigLev, self.menuItemViewTrigLev)
		self.menuItemViewTrigOrig = viewmenu.Append(wx.ID_ANY,
				'Trigger &Origin', 'Toggle trigger origin visibility',
				kind=wx.ITEM_CHECK)
		self.Bind(wx.EVT_MENU, self.OnViewTrigOrig, self.menuItemViewTrigOrig)

		menuBar.Append(viewmenu, '&View')

		# Help menu:
		helpmenu = wx.Menu()

		menuItemAbout = helpmenu.Append(wx.ID_ABOUT, "&About", "Information about this program.")
		self.Bind(wx.EVT_MENU, self.OnAbout, menuItemAbout)

		menuBar.Append(helpmenu, "&Help")

		# Assign menubar to frame:
		self.SetMenuBar(menuBar)
	
	def OscilloscopeDefaultSetup(self):
		self.mode = BPO.MODE_CONTINUOUS
		self.sync = BPO.SYNC_NONE
		self.trigV = 0.5*(BPO.maxV-BPO.minV)
		self.phaseOffset = 0

	def ClearPlot(self):

		if self.bpo != None:
			data = [(i,self.bpo.data[i]) for i in range(len(self.bpo.data))]
		else:
			data = [(0,nan),(100,nan)]

		plotlist = [plot.PolyLine(data, colour='blue', width=2)]

		if self.menuItemViewTrigLev.IsChecked():
			triglev_dat = [(0,self.trigV),(100,self.trigV)]
			plotlist.append(plot.PolyLine(triglev_dat, colour='red', style=wx.LONG_DASH, width=1))

		if self.menuItemViewTrigOrig.IsChecked():
			trigorig_dat = [(-self.phaseOffset,-1),(-self.phaseOffset,7)]
			plotlist.append(plot.PolyLine(trigorig_dat, colour='red', style=wx.LONG_DASH, width=1))

		gc = plot.PlotGraphics(plotlist, '', 'Sample', 'Voltage')
		self.plot.Draw(gc, xAxis=(0,100), yAxis=(-1,7))

	def OnViewGrid(self, event):
		self.plot.SetEnableGrid(self.menuItemViewGrid.IsChecked())

	def OnViewTrigLev(self, event):
		if not self.SampleButton.GetValue():
			self.ClearPlot()
	
	def OnViewTrigOrig(self, event):
		if not self.SampleButton.GetValue():
			self.ClearPlot()

	def OnAbout(self, event):

		about_msg = """
PirateScope v0.1
(C) 2010 Free Software Foundation

This software is distributed under the
terms of the GNU General Public License.
"""

		dlg = wx.MessageDialog(self, about_msg, "About PirateScope", wx.OK)
		dlg.ShowModal()
		dlg.Destroy()
	
	def OnExit(self, event):

		if self.SampleButton.GetValue():
			self.timer.Stop()
			self.bpo.abort()
			time.sleep(0.5)

		self.Close(True)
	
	def OnUpdate(self, event):

		if self.bpo.isAlive():
			data = [(i,self.bpo.data[i]) for i in range(len(self.bpo.data))]

			plotlist = [plot.PolyLine(data, colour='blue', width=2)]

			if self.menuItemViewTrigLev.IsChecked():
				triglev_dat = [(0,self.trigV),(100,self.trigV)]
				plotlist.append(plot.PolyLine(triglev_dat, colour='red', style=wx.LONG_DASH, width=1))

			if self.menuItemViewTrigOrig.IsChecked():
				trigorig_dat = [(-self.phaseOffset,-1),(-self.phaseOffset,7)]
				plotlist.append(plot.PolyLine(trigorig_dat, colour='red', style=wx.LONG_DASH, width=1))

			gc = plot.PlotGraphics(plotlist, '', 'Sample', 'Voltage')
			self.plot.Draw(gc, xAxis=(0,100), yAxis=(-1,7))
		else:
			self.timer.Stop()

			# Turn button off and green:
			self.SampleButton.SetValue(False)
			self.SampleButton.SetBackgroundColour('green')

			# Display "SAMPLING"
			self.SampleButton.SetLabel('SAMPLING')


	def OnSampleButton(self, event):

		if self.SampleButton.GetValue():

			# Fire up oscilloscope:
			try: 
				self.bpo = BPO(self.port, 0, self.mode, self.sync, self.trigV, self.phaseOffset)
			except:
				msg = "Failed to open Bus Pirate port '" + self.port + "'.\nCheck USB connection."
				dlg = wx.MessageDialog(self, msg, "Error", wx.OK)
				dlg.ShowModal()
				dlg.Destroy()

				self.SampleButton.SetValue(False)
				return

			# Turn button red:
			self.SampleButton.SetBackgroundColour('red')

			# Display "STOP SAMPLING"
			self.SampleButton.SetLabel('    STOP\nSAMPLING')

			# If continuous sampling selected, disable one shot radio button:
			if self.mode == BPO.MODE_CONTINUOUS:
				self.RB_oneshot.Disable()

			# Start plot timer (0.1s intervals):
			self.timer.Start(milliseconds=100)

		else:
			if self.bpo.isAlive():
				self.timer.Stop()
				self.bpo.abort()
				self.ClearPlot()

				# Turn button green:
				self.SampleButton.SetBackgroundColour('green')

				# Display "SAMPLING"
				self.SampleButton.SetLabel('SAMPLING')

				# Ensure one shot radio button is enabled:
				self.RB_oneshot.Enable()

	
	def OnSampContinuous(self, event):
		self.mode = BPO.MODE_CONTINUOUS

	def OnSampOneShot(self, event):
		self.mode = BPO.MODE_ONESHOT

	def OnTrigRise(self, event):
		self.sync = BPO.SYNC_RISE
		if self.SampleButton.GetValue():
			self.bpo.SetSync(self.sync)

	def OnTrigFall(self, event):
		self.sync = BPO.SYNC_FALL
		if self.SampleButton.GetValue():
			self.bpo.SetSync(self.sync)

	def OnTrigOff(self, event):
		self.sync = BPO.SYNC_NONE
		if self.SampleButton.GetValue():
			self.bpo.SetSync(self.sync)
	
	def OnTrigLevAdjust(self, event):
		self.trigV = self.TrigLevSlider.GetValue()/100.
		if self.SampleButton.GetValue():
			self.bpo.SetTrig(self.trigV)
		elif self.menuItemViewTrigLev.IsChecked():
			self.ClearPlot()
	
	def OnPhaseAdjust(self, event):
		self.phaseOffset = self.PhaseSpinCtrl.GetValue()
		if self.bpo != None and self.bpo.isAlive():
			self.bpo.SetPhaseOffset(self.phaseOffset)
		elif self.menuItemViewTrigOrig.IsChecked():
			self.ClearPlot()


app = wx.App(False)
frame = MainWindow(None, 'PirateScope')
app.MainLoop()
